{
  "api/ASE_Assignment.AppArray.html": {
    "href": "api/ASE_Assignment.AppArray.html",
    "title": "Class AppArray | ASE Assignment",
    "keywords": "Class AppArray Namespace ASE_Assignment Assembly ASE Assignment.dll Represents an application-specific array that inherits functionality from the BOOSE.Array class. public class AppArray : Array, ICommand Inheritance object Command Evaluation Array AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.Compile() Array.Execute() Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class. public AppArray() Methods ArrayRestriction() Removes any restrictions applied to the array. public void ArrayRestriction() CheckParameters(string[]) Validates the parameters provided for the array. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the number of parameters is invalid. ProcessArrayParametersCompile(bool) Processes and compiles the parameters for the array, based on the specified mode (peek or poke). protected override void ProcessArrayParametersCompile(bool peekOrPoke) Parameters peekOrPoke bool Indicates whether the mode is \"peek\" (true) or \"poke\" (false). Exceptions CommandException Thrown if the command or variable is invalid. Exception Thrown if an error occurs during array parameter processing."
  },
  "api/ASE_Assignment.AppBool.html": {
    "href": "api/ASE_Assignment.AppBool.html",
    "title": "Class AppBool | ASE Assignment",
    "keywords": "Class AppBool Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a customized boolean class that inherits from the BOOSE.Boolean base class. This class overrides restrictions to allow unrestricted behavior. public class AppBool : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBool Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppBool() Initializes a new instance of the AppBool class. public AppBool() Methods Restrictions() Overrides the Restrictions method to remove restrictions. This allows the boolean class to behave without constraints. public override void Restrictions()"
  },
  "api/ASE_Assignment.AppCanvas.html": {
    "href": "api/ASE_Assignment.AppCanvas.html",
    "title": "Class AppCanvas | ASE Assignment",
    "keywords": "Class AppCanvas Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom canvas for drawing shapes, lines, and text. Implements the BOOSE.ICanvas interface. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() Initializes a new instance of the AppCanvas class. Sets the canvas size and initializes the pen color and graphics object. public AppCanvas() Properties Instance public static AppCanvas Instance { get; } Property Value AppCanvas PenColour Gets or sets the color of the pen. public object PenColour { get; set; } Property Value object Xpos Gets or sets the X-coordinate position of the pen. public int Xpos { get; set; } Property Value int Ypos Gets or sets the Y-coordinate position of the pen. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle at the current pen position. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. filled bool Indicates if the circle should be filled. Clear() Clears the canvas by filling it with white color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to the specified coordinates. public void DrawTo(int x, int y) Parameters x int The X-coordinate of the endpoint. y int The Y-coordinate of the endpoint. MoveTo(int, int) Moves the pen to a specified position without drawing. public void MoveTo(int x, int y) Parameters x int The X-coordinate to move the pen. y int The Y-coordinate to move the pen. Rect(int, int, bool) Draws a rectangle at the current pen position. public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates if the rectangle should be filled. Reset() Resets the pen position to (0, 0). public void Reset() Set(int, int) Sets the size of the canvas. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas. ysize int The height of the canvas. SetBitmap(Bitmap) Sets the bitmap for the canvas and updates the associated graphics object. public void SetBitmap(Bitmap bitmap) Parameters bitmap Bitmap The Bitmap object to be used as the canvas. Remarks This method initializes the bitmap and graphics object to enable drawing operations. Ensure that the provided bitmap is not null and is properly initialized before calling this method. Exceptions CanvasException Thrown when the bitmap cannot be set, typically due to an internal error. The exception includes details about the failure. SetColour(int, int, int) Sets the pen color using RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component (0-255). green int The green component (0-255). blue int The blue component (0-255). Exceptions CanvasException Thrown when any RGB component is out of range. Tri(int, int) Draws a triangle at the current position. public void Tri(int width, int height) Parameters width int The width of the triangle base. height int The height of the triangle. Exceptions NotImplementedException Always thrown because the method is not implemented. WriteText(string) Writes text at the current position. public void WriteText(string text) Parameters text string The text to be written. getBitmap() Returns the current bitmap representing the canvas. public object getBitmap() Returns object"
  },
  "api/ASE_Assignment.AppCircle.html": {
    "href": "api/ASE_Assignment.AppCircle.html",
    "title": "Class AppCircle | ASE Assignment",
    "keywords": "Class AppCircle Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a drawing command for circle with optional filled property. Extends the BOOSE.Circle class to include additional functionality. public class AppCircle : Circle, ICommand Inheritance object Command CanvasCommand CommandOneParameter Circle AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCircle() Initializes a default instance of the AppCircle class. public AppCircle() AppCircle(Canvas, int, bool) Initializes a new instance of the AppCircle class with specified parameters. public AppCircle(Canvas c, int radius, bool filled = false) Parameters c Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. filled bool Indicates whether the circle is filled or not. Methods CheckParameters(string[]) Validates the parameters passed to the circle drawing command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters provided to the command. Exceptions CommandException Thrown if number of parameters is invalid or filled parameter is not valid . Execute() Executes the circle drawing command on the canvas. public override void Execute() Exceptions CommandException Thrown if there is any error while executing the command."
  },
  "api/ASE_Assignment.AppClear.html": {
    "href": "api/ASE_Assignment.AppClear.html",
    "title": "Class AppClear | ASE Assignment",
    "keywords": "Class AppClear Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to clear the canvas in the ASE assignment. public class AppClear : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppClear Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters for the clear operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the command parameters. Exceptions CommandException Thrown when the parameter array is empty, indicating invalid input. Execute() Executes the clear operation on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.AppCommandFactory.html": {
    "href": "api/ASE_Assignment.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Assignment",
    "keywords": "Class AppCommandFactory Namespace ASE_Assignment Assembly ASE Assignment.dll Factory class responsible for creating specific command instances based on the command type. Inherits from BOOSE.CommandFactory. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates and returns an instance of a command based on the provided command type. public override ICommand MakeCommand(string commandType) Parameters commandType string The type of command to create (e.g., \"write\", \"triangle\"). Returns ICommand An instance of BOOSE.ICommand corresponding to the specified command type. Exceptions ArgumentException Thrown if the command type is not recognized."
  },
  "api/ASE_Assignment.AppCompoundCommand.html": {
    "href": "api/ASE_Assignment.AppCompoundCommand.html",
    "title": "Class AppCompoundCommand | ASE Assignment",
    "keywords": "Class AppCompoundCommand Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a compound command that extends the behavior of the AppConditionalCommand class. Provides support for handling compound conditional commands. public class AppCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand Implements ICommand Derived AppElse Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCompoundCommand() Initializes a new instance of the AppCompoundCommand class. public AppCompoundCommand() Properties CorrCommand Gets or sets the corresponding conditional command associated with this compound command. public ConditionalCommand CorrCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Validates the parameters provided for the compound command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of string parameters for the command. Exceptions CommandException Thrown when the number of parameters is invalid or the parameter content does not contain a valid end marker (e.g., \"endif\", \"endwhile\", \"endfor\", or \"endmethod\"). Execute() Executes the compound command and resets the count value after execution. public override void Execute() ResetCount(int) Resets the static field \"뇀\" in the BOOSE.Boolean class to a specified value. public void ResetCount(int newVal) Parameters newVal int The new value to set for the \"뇀\" field. Exceptions BOOSEException Thrown when the field \"뇀\" cannot be accessed in the BOOSE.Boolean class."
  },
  "api/ASE_Assignment.AppConditionalCommand.html": {
    "href": "api/ASE_Assignment.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | ASE Assignment",
    "keywords": "Class AppConditionalCommand Namespace ASE_Assignment Assembly ASE Assignment.dll public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived AppCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the counter after execution. public override void Execute() Exceptions BOOSEException Thrown if there is any error in the counter reset. ResetCount(int) Resets the internal static counter in the BOOSE.Boolean class. public void ResetCount(int newVal) Parameters newVal int The new value to set for the static counter. Exceptions BOOSEException Thrown if the internal field cannot be accessed."
  },
  "api/ASE_Assignment.AppElse.html": {
    "href": "api/ASE_Assignment.AppElse.html",
    "title": "Class AppElse | ASE Assignment",
    "keywords": "Class AppElse Namespace ASE_Assignment Assembly ASE Assignment.dll Represents an \"else\" conditional command in the program. This command is part of compound commands and provides branching logic based on conditions. public class AppElse : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppElse Implements ICommand Inherited Members AppCompoundCommand.CorrCommand AppCompoundCommand.ResetCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrEnd Gets or sets the corresponding BOOSE.End object associated with this \"else\" command. public End CorrEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters provided for the \"else\" command. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters for the command. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the \"else\" command by linking it with its corresponding compound command. public override void Compile() Exceptions Exception Thrown when an error occurs while compiling the \"else\" command. Execute() Executes the \"else\" command by updating the program counter if the condition of the corresponding command is true. public override void Execute()"
  },
  "api/ASE_Assignment.AppEnd.html": {
    "href": "api/ASE_Assignment.AppEnd.html",
    "title": "Class AppEnd | ASE Assignment",
    "keywords": "Class AppEnd Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.End class. Provides additional functionality and overrides default behavior for end commands. public class AppEnd : End, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand End AppEnd Implements ICommand Inherited Members End.Compile() End.Execute() CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class. Automatically reduces restrictions for enhanced flexibility. public AppEnd() Methods Restrictions() Overrides the default restrictions method to allow unrestricted behavior. public override void Restrictions()"
  },
  "api/ASE_Assignment.AppFor.html": {
    "href": "api/ASE_Assignment.AppFor.html",
    "title": "Class AppFor | ASE Assignment",
    "keywords": "Class AppFor Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.For class. Provides extended or modified functionality for \"for\" loop commands in the program. public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.Execute() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppFor() Initializes a new instance of the AppFor class. public AppFor() Methods Restrictions() Overrides the default restrictions method to allow unrestricted behavior. public override void Restrictions()"
  },
  "api/ASE_Assignment.AppIf.html": {
    "href": "api/ASE_Assignment.AppIf.html",
    "title": "Class AppIf | ASE Assignment",
    "keywords": "Class AppIf Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.If class. Provides extended or modified functionality for \"if\" conditional commands in the program. public class AppIf : If, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand If AppIf Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Initializes a new instance of the AppIf class. Automatically reduces restrictions to enhance flexibility. public AppIf() Methods Restrictions() Overrides the default restrictions method to allow unrestricted behavior. public override void Restrictions()"
  },
  "api/ASE_Assignment.AppInt.html": {
    "href": "api/ASE_Assignment.AppInt.html",
    "title": "Class AppInt | ASE Assignment",
    "keywords": "Class AppInt Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.Int class. Provides extended or modified functionality for integer-related operations in the program. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppInt() Initializes a new instance of the AppInt class. public AppInt() Methods Restrictions() Overrides the default restrictions method to allow unrestricted behavior. public override void Restrictions()"
  },
  "api/ASE_Assignment.AppMethod.html": {
    "href": "api/ASE_Assignment.AppMethod.html",
    "title": "Class AppMethod | ASE Assignment",
    "keywords": "Class AppMethod Namespace ASE_Assignment Assembly ASE Assignment.dll public class AppMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method AppMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMethod() Initializes a new instance of the AppMethod class and resets the count to 0. public AppMethod() Methods Execute() Executes the method by calling the base class's Execute method and resetting the count to 0. public override void Execute() ResetCount(int) Resets the count in the BOOSE.Boolean class by accessing its private static field. public void ResetCount(int newVal) Parameters newVal int The new value to set for the count. Exceptions BOOSEException Thrown if the private field cannot be accessed."
  },
  "api/ASE_Assignment.AppMoveTo.html": {
    "href": "api/ASE_Assignment.AppMoveTo.html",
    "title": "Class AppMoveTo | ASE Assignment",
    "keywords": "Class AppMoveTo Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.CanvasCommand class. Handles the \"move to\" operation for moving to a specific point on a canvas. public class AppMoveTo : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppMoveTo Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.Execute() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters for the \"move to\" command. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters for the command. Exceptions NotImplementedException Thrown when the method is called because it is not yet implemented."
  },
  "api/ASE_Assignment.AppParser.html": {
    "href": "api/ASE_Assignment.AppParser.html",
    "title": "Class AppParser | ASE Assignment",
    "keywords": "Class AppParser Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.Parser class. Handles the parsing of commands and execution logic in the program. public class AppParser : Parser, IParser Inheritance object Parser AppParser Implements IParser Inherited Members Parser.ParseCommand(string) Parser.ParseProgram(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppParser(CommandFactory, StoredProgram) Initializes a new instance of the AppParser class. public AppParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory An instance of BOOSE.CommandFactory used to create commands. program StoredProgram An instance of BOOSE.StoredProgram representing the program to parse."
  },
  "api/ASE_Assignment.AppPeek.html": {
    "href": "api/ASE_Assignment.AppPeek.html",
    "title": "Class AppPeek | ASE Assignment",
    "keywords": "Class AppPeek Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the AppArray class. Handles the \"peek\" operation to access and update array values in the program. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation Array AppArray AppPeek Implements ICommand Inherited Members AppArray.ArrayRestriction() AppArray.ProcessArrayParametersCompile(bool) Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Validates the parameters provided for the \"peek\" command. public override void CheckParameters(string[] Parameters) Parameters Parameters string[] An array of strings representing the parameters for the command. Exceptions CommandException Thrown when the number of parameters is invalid (not 2 or 3). Compile() Compiles the \"peek\" command by processing the array parameters. public override void Compile() Exceptions Exception Thrown when an error occurs while compiling the \"peek\" command. Execute() Executes the \"peek\" operation by updating the program variables based on the array values. public override void Execute() Exceptions Exception Thrown when an error occurs during the execution of the \"peek\" operation."
  },
  "api/ASE_Assignment.AppPoke.html": {
    "href": "api/ASE_Assignment.AppPoke.html",
    "title": "Class AppPoke | ASE Assignment",
    "keywords": "Class AppPoke Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the AppArray class. Handles the \"poke\" operation to modify values in an array in the program. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation Array AppArray AppPoke Implements ICommand Inherited Members AppArray.ArrayRestriction() AppArray.ProcessArrayParametersCompile(bool) Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Validates the parameters provided for the \"poke\" command. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters for the command. Exceptions CommandException Thrown when the number of parameters is invalid (not 2 or 3). Compile() Compiles the \"poke\" command by processing the array parameters. public override void Compile() Exceptions Exception Thrown when an error occurs while compiling the \"poke\" command. Execute() Executes the \"poke\" operation by updating the array values in the program. public override void Execute() Exceptions Exception Thrown when an error occurs during the execution of the \"poke\" operation. Set(StoredProgram, string) Sets the parameters for the \"poke\" operation in the program. public override void Set(StoredProgram Program, string Params) Parameters Program StoredProgram The BOOSE.StoredProgram where the poke operation will be applied. Params string The string representing the parameters for the \"poke\" command. Exceptions Exception Thrown when an error occurs while setting the \"poke\" operation."
  },
  "api/ASE_Assignment.AppReal.html": {
    "href": "api/ASE_Assignment.AppReal.html",
    "title": "Class AppReal | ASE Assignment",
    "keywords": "Class AppReal Namespace ASE_Assignment Assembly ASE Assignment.dll public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppReal() Initializes a new instance of the AppReal class and enforces restrictions on variable usage. public AppReal() Methods Restrictions() Enforces restrictions on the usage of variables. Removed restrictions in this case. public override void Restrictions()"
  },
  "api/ASE_Assignment.AppRect.html": {
    "href": "api/ASE_Assignment.AppRect.html",
    "title": "Class AppRect | ASE Assignment",
    "keywords": "Class AppRect Namespace ASE_Assignment Assembly ASE Assignment.dll public class AppRect : Rect, ICommand Inheritance object Command CanvasCommand CommandOneParameter Rect AppRect Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppRect() Initializes a default instance of the AppRect class. public AppRect() AppRect(Canvas, int, int, bool) Initializes a new instance of the AppRect class with specified parameters. public AppRect(Canvas c, int width, int height, bool filled = false) Parameters c Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates whether the rectangle is filled or not. Default is false. Methods CheckParameters(string[]) Validates the parameters passed to the rectangle drawing command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters provided to the command. Exceptions CommandException Thrown if number of parameters is invalid or if filled parameter is not valid. Execute() Executes the rectangle drawing command on the canvas. public override void Execute() Exceptions CommandException Thrown if execution fails due to invalid parameters."
  },
  "api/ASE_Assignment.AppReset.html": {
    "href": "api/ASE_Assignment.AppReset.html",
    "title": "Class AppReset | ASE Assignment",
    "keywords": "Class AppReset Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to reset the canvas in the ASE assignment. public class AppReset : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppReset Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Checks if the provided parameters are valid for the reset operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the command parameters. Exceptions CommandException Thrown when the parameter array is empty, indicating invalid input. Execute() Executes the reset operation on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.AppStoredProgram.html": {
    "href": "api/ASE_Assignment.AppStoredProgram.html",
    "title": "Class AppStoredProgram | ASE Assignment",
    "keywords": "Class AppStoredProgram Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.StoredProgram class. Handles the execution of stored programs with commands and interaction with a canvas. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.SyntaxOk StoredProgram.AddMethod(Method) StoredProgram.GetMethod(string) StoredProgram.AddVariable(Evaluation) StoredProgram.GetVariable(string) StoredProgram.GetVariable(int) StoredProgram.FindVariable(Evaluation) StoredProgram.FindVariable(string) StoredProgram.VariableExists(string) StoredProgram.GetVarValue(string) StoredProgram.UpdateVariable(string, int) StoredProgram.UpdateVariable(string, double) StoredProgram.UpdateVariable(string, bool) StoredProgram.DeleteVariable(string) StoredProgram.IsExpression(string) StoredProgram.EvaluateExpressionWithString(string) StoredProgram.EvaluateExpression(string) StoredProgram.Push(ConditionalCommand) StoredProgram.Pop() StoredProgram.Add(Command) StoredProgram.NextCommand() StoredProgram.ResetProgram() StoredProgram.Commandsleft() StoredProgram.PC ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class with the specified canvas. public AppStoredProgram(ICanvas canvas) Parameters canvas ICanvas An instance of BOOSE.ICanvas used by the stored program. Methods Run() Runs the stored program, executing each command in sequence until no commands are left. public override void Run() Exceptions Exception Thrown when an error occurs during the execution of the stored program."
  },
  "api/ASE_Assignment.AppTri.html": {
    "href": "api/ASE_Assignment.AppTri.html",
    "title": "Class AppTri | ASE Assignment",
    "keywords": "Class AppTri Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a triangle on the canvas. public class AppTri : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppTri Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppTri() Initializes a new instance of the AppTri class. public AppTri() AppTri(Canvas, int, int) Initializes a new instance of the AppTri class with specified canvas, base length, and height. public AppTri(Canvas c, int baseLength, int height) Parameters c Canvas The canvas to draw on. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates and sets the parameters required to draw a triangle. public override void CheckParameters(string[] parameters) Parameters parameters string[] Array of parameters containing base length and height. Exceptions ArgumentException Thrown when the parameter count is invalid or parameters are not integers. Execute() Executes the command to draw a triangle on the canvas. public override void Execute() Exceptions CanvasException Thrown when there is an error drawing the triangle."
  },
  "api/ASE_Assignment.AppWhile.html": {
    "href": "api/ASE_Assignment.AppWhile.html",
    "title": "Class AppWhile | ASE Assignment",
    "keywords": "Class AppWhile Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.While class. Handles the functionality of a \"while\" loop in the stored program. public class AppWhile : While, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand While AppWhile Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.CheckParameters(string[]) CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Initializes a new instance of the AppWhile class. public AppWhile() Methods Restrictions() Defines any restrictions for the \"while\" loop command. Currently, no restrictions are implemented in this class. public override void Restrictions()"
  },
  "api/ASE_Assignment.AppWriteText.html": {
    "href": "api/ASE_Assignment.AppWriteText.html",
    "title": "Class AppWriteText | ASE Assignment",
    "keywords": "Class AppWriteText Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to write text to the canvas. public class AppWriteText : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppWriteText Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWriteText() Initializes a new instance of the AppWriteText class. public AppWriteText() AppWriteText(Canvas, string) Initializes a new instance of the AppWriteText class with specified canvas and text. public AppWriteText(Canvas c, string text) Parameters c Canvas The canvas to draw on. text string The text to write. Methods CheckParameters(string[]) Validates the parameters for the WriteText command. public override void CheckParameters(string[] Parameters) Parameters Parameters string[] The array of parameters to check. Exceptions ArgumentException Thrown when no text is provided. Execute() Executes the command to write text to the canvas. public override void Execute() Exceptions InvalidOperationException Thrown when the canvas is not set or the text is empty or null."
  },
  "api/ASE_Assignment.Form1.html": {
    "href": "api/ASE_Assignment.Form1.html",
    "title": "Class Form1 | ASE Assignment",
    "keywords": "Class Form1 Namespace ASE_Assignment Assembly ASE Assignment.dll Represents the main form of the ASE drawing application. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes a new instance of the Form1 class. Sets up the canvas, command factory, stored program, and parser. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment.html": {
    "href": "api/ASE_Assignment.html",
    "title": "Namespace ASE_Assignment | ASE Assignment",
    "keywords": "Namespace ASE_Assignment Classes AppArray Represents an application-specific array that inherits functionality from the BOOSE.Array class. AppBool Represents a customized boolean class that inherits from the BOOSE.Boolean base class. This class overrides restrictions to allow unrestricted behavior. AppCanvas Represents a custom canvas for drawing shapes, lines, and text. Implements the BOOSE.ICanvas interface. AppCircle Represents a drawing command for circle with optional filled property. Extends the BOOSE.Circle class to include additional functionality. AppClear Represents a command to clear the canvas in the ASE assignment. AppCommandFactory Factory class responsible for creating specific command instances based on the command type. Inherits from BOOSE.CommandFactory. AppCompoundCommand Represents a compound command that extends the behavior of the AppConditionalCommand class. Provides support for handling compound conditional commands. AppConditionalCommand AppElse Represents an \"else\" conditional command in the program. This command is part of compound commands and provides branching logic based on conditions. AppEnd Represents a custom implementation of the BOOSE.End class. Provides additional functionality and overrides default behavior for end commands. AppFor Represents a custom implementation of the BOOSE.For class. Provides extended or modified functionality for \"for\" loop commands in the program. AppIf Represents a custom implementation of the BOOSE.If class. Provides extended or modified functionality for \"if\" conditional commands in the program. AppInt Represents a custom implementation of the BOOSE.Int class. Provides extended or modified functionality for integer-related operations in the program. AppMethod AppMoveTo Represents a custom implementation of the BOOSE.CanvasCommand class. Handles the \"move to\" operation for moving to a specific point on a canvas. AppParser Represents a custom implementation of the BOOSE.Parser class. Handles the parsing of commands and execution logic in the program. AppPeek Represents a custom implementation of the AppArray class. Handles the \"peek\" operation to access and update array values in the program. AppPoke Represents a custom implementation of the AppArray class. Handles the \"poke\" operation to modify values in an array in the program. AppReal AppRect AppReset Represents a command to reset the canvas in the ASE assignment. AppStoredProgram Represents a custom implementation of the BOOSE.StoredProgram class. Handles the execution of stored programs with commands and interaction with a canvas. AppTri Represents a command to draw a triangle on the canvas. AppWhile Represents a custom implementation of the BOOSE.While class. Handles the functionality of a \"while\" loop in the stored program. AppWriteText Represents a command to write text to the canvas. Form1 Represents the main form of the ASE drawing application."
  },
  "api/ASE_Assignment_Tests.AppArrayTests.html": {
    "href": "api/ASE_Assignment_Tests.AppArrayTests.html",
    "title": "Class AppArrayTests | ASE Assignment",
    "keywords": "Class AppArrayTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll [TestFixture] public class AppArrayTests Inheritance object AppArrayTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeInstance() [Test] public void Constructor_ShouldInitializeInstance() Setup() [SetUp] public void Setup()"
  },
  "api/ASE_Assignment_Tests.AppBooleanTests.html": {
    "href": "api/ASE_Assignment_Tests.AppBooleanTests.html",
    "title": "Class AppBooleanTests | ASE Assignment",
    "keywords": "Class AppBooleanTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll public class AppBooleanTests Inheritance object AppBooleanTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeAppBooleanInstance() Tests that the constructor of AppBool creates a valid instance. [Test] public void Constructor_ShouldInitializeAppBooleanInstance() Restrictions_ShouldNotThrowException() Verifies that the Restrictions() method does not throw any exceptions. [Test] public void Restrictions_ShouldNotThrowException()"
  },
  "api/ASE_Assignment_Tests.AppCompoundCommandTests.html": {
    "href": "api/ASE_Assignment_Tests.AppCompoundCommandTests.html",
    "title": "Class AppCompoundCommandTests | ASE Assignment",
    "keywords": "Class AppCompoundCommandTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll [TestFixture] public class AppCompoundCommandTests Inheritance object AppCompoundCommandTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_InvalidContent_ShouldThrowCommandException() [Test] public void CheckParameters_InvalidContent_ShouldThrowCommandException() CheckParameters_InvalidParameterCount_ShouldThrowCommandException() [Test] public void CheckParameters_InvalidParameterCount_ShouldThrowCommandException() CheckParameters_ValidParameter_ShouldNotThrowException() [Test] public void CheckParameters_ValidParameter_ShouldNotThrowException() Constructor_ShouldCreateInstance() [Test] public void Constructor_ShouldCreateInstance() CorrCommand_GetAndSet_ShouldStoreCorrectValue() [Test] public void CorrCommand_GetAndSet_ShouldStoreCorrectValue()"
  },
  "api/ASE_Assignment_Tests.AppElseTests.html": {
    "href": "api/ASE_Assignment_Tests.AppElseTests.html",
    "title": "Class AppElseTests | ASE Assignment",
    "keywords": "Class AppElseTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll public class AppElseTests Inheritance object AppElseTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_InvalidParameters_ThrowsCommandException() [Test] public void CheckParameters_InvalidParameters_ThrowsCommandException() CheckParameters_ValidParameters_DoesNotThrowException() [Test] public void CheckParameters_ValidParameters_DoesNotThrowException() SetUp() [SetUp] public void SetUp() TearDown() [TearDown] public void TearDown()"
  },
  "api/ASE_Assignment_Tests.AppForTests.html": {
    "href": "api/ASE_Assignment_Tests.AppForTests.html",
    "title": "Class AppForTests | ASE Assignment",
    "keywords": "Class AppForTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll public class AppForTests Inheritance object AppForTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppFor_Constructor_CreatesInstance() Tests that the AppFor constructor creates an instance successfully. [Test] public void AppFor_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/ASE_Assignment_Tests.AppIfTests.html": {
    "href": "api/ASE_Assignment_Tests.AppIfTests.html",
    "title": "Class AppIfTests | ASE Assignment",
    "keywords": "Class AppIfTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll public class AppIfTests Inheritance object AppIfTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppIf_Constructor_CreatesInstance() Tests that the AppIf constructor creates an instance successfully. [Test] public void AppIf_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/ASE_Assignment_Tests.AppIntTests.html": {
    "href": "api/ASE_Assignment_Tests.AppIntTests.html",
    "title": "Class AppIntTests | ASE Assignment",
    "keywords": "Class AppIntTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll [TestFixture] public class AppIntTests Inheritance object AppIntTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppInt_Instance_Created_Successfully() Verifies that an instance of AppInt is created successfully. [Test] public void AppInt_Instance_Created_Successfully() Restrictions_DoesNotThrowException() Verifies that the Restrictions method does not throw an exception when called. [Test] public void Restrictions_DoesNotThrowException() SetUp() Sets up the test environment by initializing a new instance of AppInt. [SetUp] public void SetUp()"
  },
  "api/ASE_Assignment_Tests.AppMethodTests.html": {
    "href": "api/ASE_Assignment_Tests.AppMethodTests.html",
    "title": "Class AppMethodTests | ASE Assignment",
    "keywords": "Class AppMethodTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll Unit tests for the AppMethod class. public class AppMethodTests Inheritance object AppMethodTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppMethod_Constructor_CreatesInstance() Tests that the AppMethod constructor creates an instance successfully. [Test] public void AppMethod_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/ASE_Assignment_Tests.AppRealTests.html": {
    "href": "api/ASE_Assignment_Tests.AppRealTests.html",
    "title": "Class AppRealTests | ASE Assignment",
    "keywords": "Class AppRealTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll Unit Tests for the AppReal class, verifying its behavior and functionality. [TestFixture] public class AppRealTests Inheritance object AppRealTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeInstance() Tests that the constructor of AppReal correctly initializes an instance. [Test] public void Constructor_ShouldInitializeInstance() Restrictions_ShouldNotThrowException() Tests that the Restrictions method does not throw any exceptions when called. [Test] public void Restrictions_ShouldNotThrowException() Setup() Sets up the test environment by initializing a new instance of AppReal. [SetUp] public void Setup()"
  },
  "api/ASE_Assignment_Tests.AppStoredProgramTests.html": {
    "href": "api/ASE_Assignment_Tests.AppStoredProgramTests.html",
    "title": "Class AppStoredProgramTests | ASE Assignment",
    "keywords": "Class AppStoredProgramTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll Unit tests for the AppStoredProgram class. [TestFixture] public class AppStoredProgramTests Inheritance object AppStoredProgramTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_InitializesSuccessfully() Verifies that the constructor initializes an instance of AppStoredProgram successfully. [Test] public void Constructor_InitializesSuccessfully() Run_WithInvalidCommand_ThrowsStoredProgramException() Verifies that running the program with invalid commands throws a BOOSE.StoredProgramException. [Test] public void Run_WithInvalidCommand_ThrowsStoredProgramException() Run_WithNoCommands_DoesNotThrow() Ensures that running the program with no commands does not throw any exceptions. [Test] public void Run_WithNoCommands_DoesNotThrow() Run_WithValidCommand_ExecutesSuccessfully() Tests that running the program with valid commands executes successfully. [Test] public void Run_WithValidCommand_ExecutesSuccessfully() SetUp() Sets up the test environment by initializing the AppStoredProgram instance. [SetUp] public void SetUp() TearDown() Cleans up the test environment by setting the AppStoredProgram instance as null after each test. [TearDown] public void TearDown()"
  },
  "api/ASE_Assignment_Tests.AppWhileTests.html": {
    "href": "api/ASE_Assignment_Tests.AppWhileTests.html",
    "title": "Class AppWhileTests | ASE Assignment",
    "keywords": "Class AppWhileTests Namespace ASE_Assignment_Tests Assembly ASE Assignment Tests.dll Unit tests for the AppWhile class. public class AppWhileTests Inheritance object AppWhileTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppWhile_Constructor_CreatesInstance() Tests that the AppWhile constructor creates an instance successfully. [Test] public void AppWhile_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/ASE_Assignment_Tests.html": {
    "href": "api/ASE_Assignment_Tests.html",
    "title": "Namespace ASE_Assignment_Tests | ASE Assignment",
    "keywords": "Namespace ASE_Assignment_Tests Classes AppArrayTests AppBooleanTests AppCompoundCommandTests AppElseTests AppForTests AppIfTests AppIntTests AppMethodTests Unit tests for the AppMethod class. AppRealTests Unit Tests for the AppReal class, verifying its behavior and functionality. AppStoredProgramTests Unit tests for the AppStoredProgram class. AppWhileTests Unit tests for the AppWhile class."
  },
  "api/Part1Tests.Tests.html": {
    "href": "api/Part1Tests.Tests.html",
    "title": "Class Tests | ASE Assignment",
    "keywords": "Class Tests Namespace Part1Tests Assembly ASE Assignment Tests.dll Contains unit tests for the AppCanvas class. public class Tests Inheritance object Tests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawTo_ShouldDrawToFinalPosition() Tests the DrawTo(int, int) method to ensure it updates the pen's position after drawing. [Test] public void DrawTo_ShouldDrawToFinalPosition() MoveTo_ShouldSetPenPosition() Tests the MoveTo(int, int) method to ensure it sets the pen position correctly. [Test] public void MoveTo_ShouldSetPenPosition() MultiLineCommandTest() Tests a sequence of commands to ensure the pen's position is updated correctly after multiple operations. [Test] public void MultiLineCommandTest() Setup() Sets up the test environment by initializing a new AppCanvas instance. This method runs before each test. [SetUp] public void Setup()"
  },
  "api/Part1Tests.html": {
    "href": "api/Part1Tests.html",
    "title": "Namespace Part1Tests | ASE Assignment",
    "keywords": "Namespace Part1Tests Classes Tests Contains unit tests for the AppCanvas class."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Assignment",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Assignment",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Assignment",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}